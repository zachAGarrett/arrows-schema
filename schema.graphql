####### TYPES
type Arrow {
  value: Int!
  offset: Float # millimeters
  angle: Int # radians
  recordedAt: DateTime

  # RELATIONSHIPS
  set: Set! @relationship(type: "OF", properties: "ArrowOf", direction: OUT)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Set {
  complete: Boolean! @default(value: true)
  arrowsInOrder: Boolean!

  # RELATIONSHIPS
  target: Target! @relationship(type: "AT", direction: OUT)
  arrows: [Arrow!]!
    @relationship(type: "OF", properties: "ArrowOf", direction: IN)
  sets: [Set!]! @relationship(type: "AGAINST", direction: OUT)
  match: Match @relationship(type: "OF", properties: "SetOf", direction: OUT)
  athlete: Athlete!
    @relationship(type: "SHOOTS", properties: "AthleteShoots", direction: IN)
  nation: Nation @relationship(type: "FOR", direction: OUT)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Target {
  rings: Int!
  radius: Int!
  max: Int!
  min: Int!
  xRing: Boolean!

  # RELATIONSHIPS

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Match {
  complete: Boolean! @default(value: true)
  style: MatchStyle!
  gender: MatchGender!
  processed: Boolean! @default(value: false)

  # RELATIONSHIPS
  sets: [Set!]! @relationship(type: "OF", properties: "SetOf", direction: IN)
  event: Event @relationship(type: "OF", properties: "MatchOf", direction: OUT)
  athletes: [Athlete!]!
    @relationship(
      type: "COMPETES"
      properties: "AthleteCompetes"
      direction: IN
    )
  division: Division! @relationship(type: "OF", direction: OUT)
  dataSources: [DataSource!]!
    @relationship(type: "IN", properties: "InDataSource", direction: OUT)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Event {
  name: String!
  complete: Boolean @default(value: true)
  start: Date!
  end: Date!
  processed: Boolean! @default(value: false)

  # RELATIONSHIPS
  matches: [Match!]!
    @relationship(type: "OF", properties: "MatchOf", direction: IN)
  competition: Competition
    @relationship(type: "OF", properties: "EventOf", direction: IN)
  dataSources: [DataSource!]!
    @relationship(type: "IN", properties: "InDataSource", direction: OUT)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Competition {
  complete: Boolean! @default(value: true)
  name: String!
  start: Date!
  end: Date!
  processed: Boolean! @default(value: false)

  # RELATIONSHIPS
  events: [Event!]!
    @relationship(type: "OF", properties: "EventOf", direction: IN)
  dataSources: [DataSource!]!
    @relationship(type: "IN", properties: "InDataSource", direction: OUT)
  nation: Nation @relationship(type: "HOSTS", direction: IN)
  athletes: [Athlete!]! @relationship(type: "COMPETES", direction: IN)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Athlete {
  familyName: String!
  givenName: String!
  nameOrder: NameOrder!
  elimElo: Int
  qualElo: Int

  # RELATIONSHIPS
  sets: [Set!]!
    @relationship(type: "SHOOTS", properties: "AthleteShoots", direction: OUT)
  matches: [Event!]!
    @relationship(
      type: "COMPETES"
      properties: "AthleteCompetes"
      direction: OUT
    )
  divisions: [Division!]! @relationship(type: "OF", direction: OUT)
  competitions: [Competition!]! @relationship(type: "COMPETES", direction: OUT)
  dataSources: [DataSource!]!
    @relationship(type: "IN", properties: "InDataSource", direction: OUT)
  nations: [Nation!]! @relationship(type: "REPRESENTS", direction: OUT)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Nation {
  name: String
  code: String! @unique

  # RELATIONSHIPS
  competitions: [Competition!]! @relationship(type: "HOSTS", direction: OUT)
  athletes: [Athlete!]! @relationship(type: "REPRESENTS", direction: IN)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type Division {
  name: String! @unique

  dataSources: [DataSource!]!
    @relationship(type: "IN", properties: "InDataSource", direction: OUT)
  matches: [Match!]! @relationship(type: "OF", direction: IN)
  athletes: [Athlete!]! @relationship(type: "OF", direction: IN)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

type DataSource {
  name: String! @unique
  type: DataSourceType!

  # RELATIONSHIPS
  athletes: [Athlete!]!
    @relationship(type: "IN", properties: "InDataSource", direction: IN)
  competitions: [Competition!]!
    @relationship(type: "IN", properties: "InDataSource", direction: IN)
  events: [Event!]!
    @relationship(type: "IN", properties: "InDataSource", direction: IN)

  # DEFAULT FIELDS
  id: ID! @id
  verified: Boolean! @default(value: false)
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])
}

####### INTERFACES
interface AthleteCompetes @relationshipProperties {
  eloDelta: Int
}

interface AthleteShoots @relationshipProperties {
  eloDelta: Int
  result: Result
}

interface ArrowOf @relationshipProperties {
  number: Int
}

interface SetOf @relationshipProperties {
  number: Int!
}

interface MatchOf @relationshipProperties {
  number: Int
}

interface EventOf @relationshipProperties {
  number: Int
}

interface InDataSource @relationshipProperties {
  createdAt: DateTime! @timestamp(operations: [CREATE])
  updatedAt: DateTime @timestamp(operations: [UPDATE])

  id: String
}

####### ENUMS
enum DataSourceType {
  """
  A data source on the internet
  """
  WEB
}

enum NameOrder {
  """
  First / Last
  """
  F # First / Last
  """
  Last / First
  """
  L # Last / First
}

enum Result {
  """
  Win
  """
  W # Win
  """
  Loss
  """
  L # Loss
  """
  Draw
  """
  D # Draw
}

enum MatchStyle {
  """
  Qualification event
  """
  QUAL # Qualification
  """
  Elimination event
  """
  ELIM # Elimination
}

enum MatchGender {
  """
  Male event gender
  """
  M # Male
  """
  Female event gender
  """
  F # Female
  """
  Mixed gender event
  """
  X # Mixed
}

enum DivisionName {
  """
  Recurve Senior
  """
  RS # Recurve Senior
  """
  Recurve U21 (Junior)
  """
  R21 # Recurve U21 (Junior)
  """
  Recurve U18 (Cadet)
  """
  R18 # Recurve U18 (Cadet)
  """
  Recurve U15 (Cub)
  """
  R15 # Recurve U15 (Cub)
  """
  Recurve U13 (Bowman)
  """
  R13 # Recurve U13 (Bowman)
  """
  Recurve 50+ (Master)
  """
  R50 # Recurve 50+ (Master)
  """
  Recurve 60+ (Master 60)
  """
  R60 # Recurve 60+ (Master 60)
  """
  Recurve 70+ (Master 70)
  """
  R70 # Recurve 70+ (Master 70)
  """
  Recurve College
  """
  RC # Recurve College
  """
  Recurve Open
  """
  RO # Recurve Open
  """
  Compound Senior
  """
  CS # Compound Senior
  """
  Compound U21 (Junior)
  """
  C21 # Compound U21 (Junior)
  """
  Compound U18 (Cadet)
  """
  C18 # Compound U18 (Cadet)
  """
  Compound U15 (Cub)
  """
  C15 # Compound U15 (Cub)
  """
  Compound U13 (Bowman)
  """
  C13 # Compound U13 (Bowman)
  """
  Compound 50+ (Master)
  """
  C5 # Compound 50+ (Master)
  """
  Compound 60+ (Master 60)
  """
  C6 # Compound 60+ (Master 60)
  """
  Compound 70+ (Master 70)
  """
  C7 # Compound 70+ (Master 70)
  """
  Compound College
  """
  CC # Compound College
  """
  Compound Open
  """
  CO # Compound Open
  """
  W1 Open
  """
  W1 # W1 Open
  """
  V.I. Open
  """
  VI # V.I. Open
  """
  Barebow Senior
  """
  BS # Barebow Senior
  """
  Barebow U21 (Junior)
  """
  B21 # Barebow U21 (Junior)
  """
  Barebow U18 (Cadet)
  """
  B18 # Barebow U18 (Cadet)
  """
  Barebow U15 (Cub)
  """
  B15 # Barebow U15 (Cub)
  """
  Barebow 50+ (Master)
  """
  B5 # Barebow 50+ (Master)
  """
  Fixed Pins U21
  """
  F21 # Fixed Pins U21
  """
  Fixed Pins U18
  """
  F18 # Fixed Pins U18
}

enum NationCode {
  AFG # Afghanistan
  ALA # Aland Islands
  ALB # Albania
  DZA # Algeria
  ASM # American Samoa
  AND # Andorra
  AGO # Angola
  AIA # Anguilla
  ATA # Antarctica
  ATG # Antigua and Barbuda
  ARG # Argentina
  ARM # Armenia
  ABW # Aruba
  AUS # Australia
  AUT # Austria
  AZE # Azerbaijan
  BHS # Bahamas
  BHR # Bahrain
  BGD # Bangladesh
  BRB # Barbados
  BLR # Belarus
  BEL # Belgium
  BLZ # Belize
  BEN # Benin
  BMU # Bermuda
  BTN # Bhutan
  BOL # Bolivia
  BIH # Bosnia and Herzegovina
  BWA # Botswana
  BVT # Bouvet Island
  BRA # Brazil
  VGB # British Virgin Islands
  IOT # British Indian Ocean Territory
  BRN # Brunei Darussalam
  BGR # Bulgaria
  BFA # Burkina Faso
  BDI # Burundi
  KHM # Cambodia
  CMR # Cameroon
  CAN # Canada
  CPV # Cape Verde
  CYM # Cayman Islands
  CAF # Central African Republic
  TCD # Chad
  CHL # Chile
  CHN # China
  HKG # Hong Kong, SAR China
  MAC # Macao, SAR China
  CXR # Christmas Island
  CCK # Cocos (Keeling) Islands
  COL # Colombia
  COM # Comoros
  COG # Congo (Brazzaville)
  COD # Congo, (Kinshasa)
  COK # Cook Islands
  CRI # Costa Rica
  CIV # CÃ´te d'Ivoire
  HRV # Croatia
  CUB # Cuba
  CYP # Cyprus
  CZE # Czech Republic
  DNK # Denmark
  DJI # Djibouti
  DMA # Dominica
  DOM # Dominican Republic
  ECU # Ecuador
  EGY # Egypt
  SLV # El Salvador
  GNQ # Equatorial Guinea
  ERI # Eritrea
  EST # Estonia
  ETH # Ethiopia
  FLK # Falkland Islands (Malvinas)
  FRO # Faroe Islands
  FJI # Fiji
  FIN # Finland
  FRA # France
  GUF # French Guiana
  PYF # French Polynesia
  ATF # French Southern Territories
  GAB # Gabon
  GMB # Gambia
  GEO # Georgia
  DEU # Germany
  GHA # Ghana
  GIB # Gibraltar
  GRC # Greece
  GRL # Greenland
  GRD # Grenada
  GLP # Guadeloupe
  GUM # Guam
  GTM # Guatemala
  GGY # Guernsey
  GIN # Guinea
  GNB # Guinea-Bissau
  GUY # Guyana
  HTI # Haiti
  HMD # Heard and Mcdonald Islands
  VAT # Holy See (Vatican City State)
  HND # Honduras
  HUN # Hungary
  ISL # Iceland
  IND # India
  IDN # Indonesia
  IRN # Iran, Islamic Republic of
  IRQ # Iraq
  IRL # Ireland
  IMN # Isle of Man
  ISR # Israel
  ITA # Italy
  JM # Jamaica
  JPN # Japan
  JEY # Jersey
  JOR # Jordan
  KAZ # Kazakhstan
  KEN # Kenya
  KIR # Kiribati
  PRK # Korea (North)
  KOR # Korea (South)
  KWT # Kuwait
  KGZ # Kyrgyzstan
  LAO # Lao PDR
  LVA # Latvia
  LBN # Lebanon
  LSO # Lesotho
  LBR # Liberia
  LBY # Libya
  LIE # Liechtenstein
  LTU # Lithuania
  LUX # Luxembourg
  MKD # Macedonia, Republic of
  MDG # Madagascar
  MWI # Malawi
  MYS # Malaysia
  MDV # Maldives
  MLI # Mali
  MLT # Malta
  MHL # Marshall Islands
  MTQ # Martinique
  MRT # Mauritania
  MUS # Mauritius
  MYT # Mayotte
  MEX # Mexico
  FSM # Micronesia, Federated States of
  MDA # Moldova
  MCO # Monaco
  MNG # Mongolia
  MNE # Montenegro
  MSR # Montserrat
  MAR # Morocco
  MOZ # Mozambique
  MMR # Myanmar
  NAM # Namibia
  NRU # Nauru
  NPL # Nepal
  NLD # Netherlands
  ANT # Netherlands Antilles
  NCL # New Caledonia
  NZL # New Zealand
  NIC # Nicaragua
  NER # Niger
  NGA # Nigeria
  NIU # Niue
  NFK # Norfolk Island
  MNP # Northern Mariana Islands
  NOR # Norway
  OMN # Oman
  PAK # Pakistan
  PLW # Palau
  PSE # Palestinian Territory
  PAN # Panama
  PNG # Papua New Guinea
  PRY # Paraguay
  PER # Peru
  PHL # Philippines
  PCN # Pitcairn
  POL # Poland
  PRT # Portugal
  PRI # Puerto Rico
  QAT # Qatar
  REU # RÃ©union
  ROU # Romania
  RUS # Russian Federation
  RWA # Rwanda
  BLM # Saint-BarthÃ©lemy
  SHN # Saint Helena
  KNA # Saint Kitts and Nevis
  LCA # Saint Lucia
  MAF # Saint-Martin (French part)
  SPM # Saint Pierre and Miquelon
  VCT # Saint Vincent and Grenadines
  WSM # Samoa
  SMR # San Marino
  STP # Sao Tome and Principe
  SAU # Saudi Arabia
  SEN # Senegal
  SRB # Serbia
  SYC # Seychelles
  SLE # Sierra Leone
  SGP # Singapore
  SVK # Slovakia
  SVN # Slovenia
  SLB # Solomon Islands
  SOM # Somalia
  ZAF # South Africa
  SGS # South Georgia and the South Sandwich Islands
  SSD # South Sudan
  ESP # Spain
  LKA # Sri Lanka
  SDN # Sudan
  SUR # Suriname
  SJM # Svalbard and Jan Mayen Islands
  SWZ # Swaziland
  SWE # Sweden
  CHE # Switzerland
  SYR # Syrian Arab Republic (Syria)
  TWN # Taiwan, Republic of China
  TJK # Tajikistan
  TZA # Tanzania, United Republic of
  THA # Thailand
  TLS # Timor-Leste
  TGO # Togo
  TKL # Tokelau
  TON # Tonga
  TTO # Trinidad and Tobago
  TUN # Tunisia
  TUR # Turkey
  TKM # Turkmenistan
  TCA # Turks and Caicos Islands
  TUV # Tuvalu
  UGA # Uganda
  UKR # Ukraine
  ARE # United Arab Emirates
  GBR # United Kingdom
  USA # United States of America
  UMI # US Minor Outlying Islands
  URY # Uruguay
  UZB # Uzbekistan
  VUT # Vanuatu
  VEN # Venezuela (Bolivarian Republic)
  VNM # Viet Nam
  VIR # Virgin Islands, US
  WLF # Wallis and Futuna Islands
  ESH # Western Sahara
  YEM # Yemen
  ZMB # Zambia
  ZWE # Zimbabwe
}
